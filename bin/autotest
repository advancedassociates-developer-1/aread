#!/usr/bin/env bash

function audible_exec() {
  initiating_sound=/System/Library/Sounds/Hero.aiff
  warning_sound=/System/Library/Sounds/Sosumi.aiff
  afplay "$initiating_sound" -v 1
  eval "$@"
  result=$?
  if [ "$result" != 0 ]; then
    afplay "$warning_sound" -v 1
  fi
}

function horizontal_rule() {
  printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
}

# avoids execution during git rebase phases
function stable_exec() {
  # How to know if there is a git rebase in progress? stackoverflow/3921409
  if (test -d "$(git rev-parse --git-path rebase-merge)" ||  test -d "$(git rev-parse --git-path rebase-apply)" ); then
    sleep $MY_LATENCY
  else
    eval "$@"
  fi
}

function kill_tests() {
  pkill -SIGINT -f './bin/rails test';
  pkill -SIGINT -f 'reek';
  pkill -SIGINT -f 'rubocop';
  pkill -SIGINT -f 'flay';
}

function run_tests() {
  reek app/
  rubocop app/
  flay --mas 21 --only defn app/models/
  stable_exec audible_exec rdbg -O -n -c -- ./bin/rails test
}

MY_LATENCY=1
run_tests
while fswatch --recursive --exclude ".*" --include "\\.rb$" --one-event .; do
  horizontal_rule
  kill_tests
  printf '\33c\e[3J' # clear
  run_tests &
done
